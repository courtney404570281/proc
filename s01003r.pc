/****************************************************/
/* Program name:  s01003r.pc                        */
/* Usage:  s01003r.pc                               */
/* Author:  Courtney                                */
/* Version:  1.00                                   */
/* Date: 2019/3/11                                   */
/* Description:                                     */
/****************************************************/
#include <string.h>
#include <zenii.h>
#include <stdio.h>
#include <printer.h>

#define  FETCH_ALLOW  100
#define  LINE_OF_PAGE  53

/****************************************************/
/*           ORACLE HOST VARIABLE                   */
/****************************************************/
EXEC SQL BEGIN DECLARE SECTION;
VARCHAR     dbs_id[30];

VARCHAR     r_unit_id[FETCH_ALLOW][10];
char        unit_id[10];
short       i_r_unit_id[FETCH_ALLOW];
short       i_unit_id;
VARCHAR     r_unit_name[FETCH_ALLOW][141];
char        unit_name[141];
short       i_r_unit_name[FETCH_ALLOW];
short       i_unit_name;
VARCHAR     r_as_nhi_id[FETCH_ALLOW][11];
char        as_nhi_id[11];
short       i_r_as_nhi_id[FETCH_ALLOW];
short       i_as_nhi_id;
VARCHAR     r_ins_nhi_id[FETCH_ALLOW][11];
char        ins_nhi_id[11];
short       i_r_ins_nhi_id[FETCH_ALLOW];
short       i_ins_nhi_id;
VARCHAR     r_in_date[FETCH_ALLOW][11];
char        in_date[11];
short       i_r_in_date[FETCH_ALLOW];
short       i_in_date;
VARCHAR     r_ins_amt[FETCH_ALLOW][7];
char        ins_amt[7];
short       i_r_ins_amt[FETCH_ALLOW];
short       i_ins_amt;
VARCHAR     r_status[FETCH_ALLOW][2];
char        status[2];
short       i_r_status[FETCH_ALLOW];
short       i_status;
VARCHAR     r_name[FETCH_ALLOW][30];
char        name[30];
short       i_r_name[FETCH_ALLOW];
short       i_name;
VARCHAR     r_as_nhi_name[FETCH_ALLOW][30];
char        as_nhi_name[30];
short       i_r_as_nhi_name[FETCH_ALLOW];
short       i_as_nhi_name;
char        unit_id_tmp[10];



EXEC SQL END DECLARE SECTION;
EXEC SQL INCLUDE sqlca.h;
EXEC SQL INCLUDE oraca.h;

/****************************************************/
/*           GLOBAL VARIABLE                        */
/****************************************************/
char *program_name;
long _batch_id;
char *printer_id;
char sys_lp[11];
char rpt_fname[50];
char rpt_id[11];
char out_date[10];
char out_time[9];
char exit_msg[50];
char *p;
FILE *ofp;
int first_page=1;
int line_cnt=LINE_OF_PAGE+1;

char q_b_id[2];
char q_unit_id1[10];
char q_unit_id2[10];
char q_ins_nhi_id[11];
char out_page_no[3];
char p_page_no=0;
int i=0;
int j=0;

char dst[133];
char ctrl_code[41];
int  ctrl_len;

EXEC SQL WHENEVER SQLERROR GOTO sqlerror;
/****************************************************/
/*           MAIN                                   */
/****************************************************/
main(argc,argv)
  int argc;
  char **argv;
{
  char *f;

  if ((program_name = strrchr(argv[0],'/')) == NULL)
       program_name = argv[0];
  else
       program_name++;

  if (argc < 7)  {
     fprintf(stderr, "%s: Usage: %s <BATCH-NO> <ORACLE-ID> <PRINTER-NO> <BRANCH_ID> <UNIT_ID1> <UNIT_ID2> <INS_NHI_ID>\n [ver 20190308]\n",
            program_name ,  ((f=strrchr(program_name,'/')) == NULL)? program_name : ++f );
     ap_exit(9999,_batch_id,"Usage: <BATCH-NO> <ORACLE-ID> <PRINTER-NO> <BRANCH_ID> <UNIT_ID1> <UNIT_ID2> <INS_NHI_ID>");
    }

  for(i=0;i<argc;i++)
  {
    if(strcmp(argv[i], "NHI_NULL")==0)
    argv[i]="";
  }

  _batch_id = atol(argv[1]);

  strcpy((char *)dbs_id.arr, argv[2]);
  dbs_id.len = strlen((char *)dbs_id.arr);
  connect_db((char *)dbs_id.arr);

  ap_init(_batch_id);  

  printer_id = argv[3];
  strcpy(rpt_id, program_name);
  strcpy(out_date, get_pdate());
  strcpy(out_time, get_ptime());

  strcpy(q_b_id,argv[4]);
  strcpy(q_unit_id1,argv[5]);
  strcpy(q_unit_id2,argv[6]);
  if (argc != 8){
      argv[7] == "NHI_NULL";
  } else {
  strcpy(q_ins_nhi_id,argv[7]);
  }

  process();

  sprintf(exit_msg, "%s", program_name);
  ap_exit(0, _batch_id ,exit_msg);

  sqlerror:
      dbs_error("main");
      ap_exit(9,_batch_id,"main");
}

process()
{
  strcpy(sys_lp,prtget(printer_id));
  if( sys_lp[0] == '\0') {
       fprintf(stderr, "prtget : system printer <%s> not found\n",printer_id);
       sprintf(exit_msg, "process: %s ", printer_id);
       ap_exit(1001, _batch_id, exit_msg);
    }

  if( pctlgen(printer_id,q_b_id) <= 0 )   {
       fprintf(stderr, "pctlgen_hp: printer <%s> data not found\n", printer_id);
       sprintf(exit_msg, "process: %s ", printer_id);
       ap_exit(1002, _batch_id, exit_msg);
    }
  
  while(read_data() == 0)  {
    
    header();
    //new function
    if(strcmp(unit_id_tmp, unit_id) != 0) {      
      prt_title();
    }

    memset(dst,'\0',133);
    comm_insert(dst,ins_nhi_id,1);
    comm_insert(dst,as_nhi_name,15);
    comm_insert(dst,as_nhi_id,27);  
    comm_insert(dst,name,41);
    comm_insert(dst,in_date,54);
    comm_insert(dst,ins_amt,66);
    comm_insert(dst,status,79);
    fprintf(ofp, "%s\n",dst);
    line_cnt++;
    
    strcpy(unit_id_tmp,unit_id);
  }
    if  (!first_page)  {
       tail();
       if(fclose(ofp) != 0) {
              fprintf(stderr, "close report file %s%ld error\n",
                 rpt_fname,_batch_id);
              sprintf(exit_msg, "process: %s%ld ", program_name,_batch_id);
              ap_exit(1006, _batch_id, exit_msg);
       }
       /*if(prtlp(sys_lp, rpt_fname) != 0) {
              fprintf(stderr, "print report file %s%ld error\n",
                 program_name,_batch_id);
              sprintf(exit_msg, "process: %s%ld ", program_name,_batch_id);
              ap_exit(1005, _batch_id, exit_msg);
       }*/
    }
}

header()
{
  if (line_cnt > LINE_OF_PAGE) {
    if(first_page) {
      first_page=0;
      strcpy(rpt_fname, prtname(program_name, _batch_id));
      if(rpt_fname[0] == '\0')  {
        fprintf(stderr, "get report file %s&ld error\n" ,
                program_name,_batch_id);
        sprintf(exit_msg, "header: %s%ld ",program_name,_batch_id);
                ap_exit(1003, _batch_id, exit_msg);
      };
    if((ofp=fopen(rpt_fname, "w")) == NULL ) {
      fprintf(stderr, "open report file %s%ld error\n",
	     program_name,_batch_id);
      sprintf(exit_msg,"header: %s%ld ",program_name,_batch_id);
      	      ap_exit(1004, _batch_id, exit_msg);
      };
     memset(ctrl_code,'\0',sizeof(ctrl_code));
     ctrl_len=pctl("reset",ctrl_code);
     fwrite(ctrl_code,ctrl_len,1,ofp);
     prt_header();
     }
  else {
     fprintf(ofp, "\f");
     prt_header();
     prt_title();
  }
  
  line_cnt = 1;
   }
}

prt_header()
{
  fprintf(ofp, "報表編號: %-10s%20s 單位資料清冊 %20s 列印日期:%9s\n",program_name,"","",out_date);
  fprintf(ofp, "程式代號: %-10s%54s頁    次: %-4d\n\n",program_name,"",++p_page_no);
}

prt_title()
{
    fprintf(ofp, "\n單位代號: %-10s  %s\n", unit_id, unit_name);
    fprintf(ofp, "==============================================================================================\n");
    fprintf(ofp, "被保險人ID    姓    名    保險對象ID    姓    名     投保日期    投保金額    狀態 \n");
    prt_line();
}

tail()
{
  prt_line();
  fprintf(ofp, "\n\n 列印時間:%9s   計 %4d   頁\f", out_time, p_page_no);
}

prt_line()
{
  fprintf(ofp, "----------------------------------------------------------------------------------------------\n");
}

read_data()
{
  static int first = 1,
             this  = FETCH_ALLOW,
             in    = FETCH_ALLOW,
             till_red  = 0;
  int i;
	
  EXEC SQL WHENEVER NOT FOUND CONTINUE;
  if (first){
      first = 0;
      EXEC SQL DECLARE C CURSOR FOR
        SELECT
            A.UNIT_ID,
            A.UNIT_NAME,
            DECRYPT(B.EAS_NHI_ID),
            DECRYPT(B.EINS_NHI_ID),
            TO_CDATE(B.IN_DATE),
            B.INS_AMT,
            B.STATUS,
            C.NAME,
            D.NAME
        FROM
            U01T_UNITFILE A,
            U02T_INSCUR B,
            U02T_ASBAS C,
            U02T_ASBAS D  
        WHERE
            A.UNIT_ID >= :q_unit_id1
        AND A.UNIT_ID <= :q_unit_id2
        AND A.UNIT_ID = B.UNIT_ID
        AND B.EAS_NHI_ID = C.EAS_NHI_ID(+)
        AND B.EINS_NHI_ID= D.EAS_NHI_ID(+)
        AND (DECRYPT(B.EINS_NHI_ID) = :q_ins_nhi_id 
        OR :q_ins_nhi_id IS NULL)
        ORDER BY A.UNIT_ID ,DECRYPT(B.EINS_NHI_ID);
    
     EXEC SQL OPEN C;
 }  
     if (this == in){  
        EXEC SQL COMMIT WORK;
        if (this < FETCH_ALLOW){  
           EXEC SQL CLOSE C;
           return(1);  
        }  
        for (i = 0; i< FETCH_ALLOW ; i++) {  
        memset(r_unit_id[i].arr,'\0',10);
        r_unit_id[i].len = 0;
        i_r_unit_id[i] = -1;
        memset(r_unit_name[i].arr,'\0',141);
        r_unit_name[i].len = 0;
        i_r_unit_name[i] = -1;
        memset(r_as_nhi_id[i].arr,'\0',11);
        r_as_nhi_id[i].len = 0;
        i_r_as_nhi_id[i] = -1;
        memset(r_ins_nhi_id[i].arr,'\0',11);
        r_ins_nhi_id[i].len = 0;
        i_r_ins_nhi_id[i] = -1;
        memset(r_in_date[i].arr,'\0',11);
        r_in_date[i].len = 0;
        i_r_in_date[i] = -1;
        memset(r_ins_amt[i].arr,'\0',7);
        r_ins_amt[i].len = 0;
        i_r_ins_amt[i] = -1;
        memset(r_status[i].arr,'\0',2);
        r_status[i].len = 0;
        i_r_status[i] = -1;
        memset(r_name[i].arr,'\0',30);
        r_name[i].len = 0;
        i_r_name[i] = -1;
        memset(r_as_nhi_name[i].arr,'\0',30);
        r_as_nhi_name[i].len = 0;
        i_r_as_nhi_name[i] = -1;
        }  
        
        in = 0;  
        EXEC SQL FETCH C  
              INTO :r_unit_id      :i_r_unit_id,
                   :r_unit_name    :i_r_unit_name,
                   :r_as_nhi_id    :i_r_as_nhi_id,
                   :r_ins_nhi_id   :i_r_ins_nhi_id,
                   :r_in_date      :i_r_in_date,
                   :r_ins_amt      :i_r_ins_amt,
                   :r_status       :i_r_status,
                   :r_name         :i_r_name,
                   :r_as_nhi_name  :i_r_as_nhi_name        
                   ;
  
        this = sqlca.sqlerrd[2] - till_red;  
        till_red = sqlca.sqlerrd[2]; 
        if ( this == 0){  
           EXEC SQL CLOSE C;  
           return(1);  
        }  
     }   
     r_unit_id[in].arr[r_unit_id[in].len] = '\0';
     strcpy((char *)unit_id , (char *)r_unit_id[in].arr);
     i_unit_id=i_r_unit_id[in];
     r_unit_name[in].arr[r_unit_name[in].len] = '\0';
     strcpy((char *)unit_name , (char *)r_unit_name[in].arr);
     i_unit_name=i_r_unit_name[in];
     r_as_nhi_id[in].arr[r_as_nhi_id[in].len] = '\0';
     strcpy((char *)as_nhi_id , (char *)r_as_nhi_id[in].arr);
     i_as_nhi_id=i_r_as_nhi_id[in];
     r_ins_nhi_id[in].arr[r_ins_nhi_id[in].len] = '\0';
     strcpy((char *)ins_nhi_id , (char *)r_ins_nhi_id[in].arr);
     i_ins_nhi_id=i_r_ins_nhi_id[in];
     r_in_date[in].arr[r_in_date[in].len] = '\0';
     strcpy((char *)in_date , (char *)r_in_date[in].arr);
     i_in_date=i_r_in_date[in];
     r_ins_amt[in].arr[r_ins_amt[in].len] = '\0';
     strcpy((char *)ins_amt , (char *)r_ins_amt[in].arr);
     i_ins_amt=i_r_ins_amt[in];
     r_status[in].arr[r_status[in].len] = '\0';
     strcpy((char *)status , (char *)r_status[in].arr);
     i_status=i_r_status[in];
     r_name[in].arr[r_name[in].len] = '\0';
     strcpy((char *)name , (char *)r_name[in].arr);
     i_name=i_r_name[in];
     r_as_nhi_name[in].arr[r_as_nhi_name[in].len] = '\0';
     strcpy((char *)as_nhi_name , (char *)r_as_nhi_name[in].arr);
     i_as_nhi_name=i_r_as_nhi_name[in];
     
     
 in=in+1;  
 
 return(0);  
  
sqlerror:  
         dbs_error("read_data");  
         ap_exit(9,_batch_id,"read_data");          
}  


